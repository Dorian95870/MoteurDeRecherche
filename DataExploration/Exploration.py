# -*- coding: utf-8 -*-
"""Demonstration Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VdEfJ5wS_7CaWZQRH0YLg76-nYDceNV

## Import
"""

import requests, json, math # Permet d'effectuer des requêtes, permet la conversion de String -> dict/list
import pandas as pd # Affichage des données sous forme de tableaux
import matplotlib.pyplot as plt
import numpy as np

"""# Trouver un moyen d'avoir un dictionnaire de données de plus d'éléments (à faire)"""

URL = "http://gutendex.com/books"
full_data = list()

NBDOCS = 1000

def getNbRequests(nbDocs):
  return math.ceil(nbDocs/32)

for i in range(getNbRequests(NBDOCS)):
  temp_data = requests.get(URL+'?page={}'.format(i+1)).json()
  temp_data = temp_data['results']
  full_data += temp_data
  print('-Page loaded {}/{}'.format(i+1, getNbRequests(NBDOCS)))

print('\n{} documents chargé(s)'.format(len(full_data)))

"""# Création tableau Pandas"""

df = pd.DataFrame(full_data)
df.head()

# Affiche les différentes colonnes
print(df.columns)

# Affiche uniquement la langue des documents
selection = df.loc[:, 'copyright'] # [:, 'languages'] correspond à: toutes les lignes, et la colonne nommé 'languages'
print(selection.value_counts())
print(len(selection.value_counts()))

# Affiche les langue différentes de ['en']
selection = df.loc[:, 'languages']

maxLen = 0
maxValue = []
newTab = []

for i in selection:
  if len(i) > 1:
    if len(i) > maxLen:
      maxLen = len(i)
      maxValue = i
    newTab.append(i)
    print(i)
print("nb languages: "+str(len(newTab)))
print("max languages for 1 book: "+str(maxLen))
print("max languages book: "+str(maxValue))

selection = df.loc[:, 'title']

map = {}

#for i in selection:
for y in selection:
  sentance = y.split()
  for word in sentance:
    word = word.lower()
    count = int()
    try:
      count = map[word]
    except:
      count = 0
    map[word] = count+1
len(map)
count = 0
for i in dict(sorted(map.items(),key= lambda x:x[1],reverse=True)):
  count += map[i]
  print(str(i)+": "+str(map[i]))
print(len(map))

"""# Save to JSON"""

df.to_json('dataset.json')